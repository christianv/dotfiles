# Git credentials
# Not in the repository, to prevent people from accidentally committing under my name
GIT_AUTHOR_NAME="Christian Vuerings"
GIT_AUTHOR_EMAIL="vueringschristian@gmail.com"
git config --global user.name "$GIT_AUTHOR_NAME"

git config --global user.email "$GIT_AUTHOR_EMAIL"

git config --global init.defaultBranch main

### Aliases
git config --global alias.sync '!git fetch origin && git rebase origin/master'

alias d="cd ~/Developer"

alias fp="git add .; git commit --amend --no-edit; git push -f origin HEAD"

alias vpnconnect="osascript ~/vpnconnect.app"

# Rebase
grebase () {
  remote="origin"
  if git config remote.upstream.url > /dev/null; then
    remote="upstream"
  fi
  default_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
  git fetch $remote
  git rebase $remote/$default_branch
}

gconflicted() {
	conflicting_files=$(git diff --check --relative | cut -d: -f1 | uniq)
	echo -e "${conflicting_files | wc -l} Conflicting files:\n${conflicting_files}"
}

# Create a new branch based on the latest upstream
gcreate () {
  remote="origin"
  if git config remote.upstream.url > /dev/null; then
    remote="upstream"
  fi
  default_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

  git fetch $remote
  git checkout -b $1 $remote/$default_branch
}

# Add all files + add a commit
gcommit () {
  git add .
  git commit -am "$1"
}

# Push up the current branch
gpush () {
  git push origin HEAD
}

### ENV Variables

# export BASH_SILENCE_DEPRECATION_WARNING=1

# Setting CDPATH allows you to jump fast to a directory
export CDPATH=".:~/:~/Developer"

# Add python to the PATH
export PATH="/usr/local/share/python/:$PATH"
# export PATH="/usr/local/opt/python/libexec/bin:$PATH"

export PATH="/opt/homebrew/bin:$PATH"

# Add npm to the PATH
export PATH="/usr/local/share/npm/bin:$PATH"

# Add pnpm to the PATH
export PNPM_HOME="$HOME/Library/pnpm"
export PATH="$PNPM_HOME:$PATH"

# Add local node modules to PATH
export PATH="./node_modules/.bin:$PATH"

# Add cargo (rust) to PATH
export PATH="~/.cargo/bin:$PATH"

# Add java to PATH
export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"

# Add gnu-sed to PATH
PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"

# Add bash completion
# export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"
# [[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"

# for completion in "$(brew --prefix)/etc/bash_completion.d/"*
# do
#     . $completion
# done

# export NVM_DIR="$HOME/.nvm"
#   . "/usr/local/opt/nvm/nvm.sh"

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# Set JAVA_HOME
export JAVA_HOME=$(/usr/libexec/java_home)

# Add RVM to PATH for scripting
export PATH="$PATH:$HOME/.rvm/bin"

# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# Load Cambly specific aliases
[[ -s "$HOME/.cambly" ]] && source "$HOME/.cambly"

# Set up virtual env
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
  eval "$(pyenv init --path)"
fi
if which pyenv-virtualenv-init > /dev/null; then
  eval "$(pyenv virtualenv-init -)"
fi

# Add Poetry to PATH
export PATH="$HOME/.local/bin:$PATH"

# Set hub option
# eval "$(hub alias -s)"

# Set GitHub copilot aliases
# eval "$(github-copilot-cli alias -- "$0")"

### Git Config

# Aliases
git config --global alias.st 'status -s'
git config --global alias.co 'checkout'
git config --global alias.rb '!git fetch origin && git rebase origin/master'

# Editor
git config --global core.editor "cursor --wait"

# Add pyenv
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

if [[ -n ${ZSH_VERSION-} ]]; then
  autoload -U +X bashcompinit && bashcompinit
fi

touch2() { mkdir -p "$(dirname "$1")" && touch "$1" ; }


# Automatically change Node.js version based on `.nvmrc`
findup() {
  path=$(pwd)
  while [[ "$path" != "" && ! -e "$path/$1" ]]; do
    path=${path%/*}
  done
  echo "$path"
}

cdnvm(){
  cd "$@";
  nvm_path=$(findup .nvmrc | tr -d '[:space:]')

  # If there are no .nvmrc file, use the default nvm version
  if [[ ! $nvm_path = *[^[:space:]]* ]]; then

    declare default_version;
    default_version=$(nvm version default);

    # If there is no default version, set it to `node`
    # This will use the latest version on your machine
    if [[ $default_version == "N/A" ]]; then
      nvm alias default node;
      default_version=$(nvm version default);
    fi

    # If the current version is not the default version, set it to use the default version
    if [[ $(nvm current) != "$default_version" ]]; then
      nvm use default;
    fi

    elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
    declare nvm_version
    nvm_version=$(<"$nvm_path"/.nvmrc)

    declare locally_resolved_nvm_version
    # `nvm ls` will check all locally-available versions
    # If there are multiple matching versions, take the latest one
    # Remove the `->` and `*` characters and spaces
    # `locally_resolved_nvm_version` will be `N/A` if no local versions are found
    locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

    # If it is not already installed, install it
    # `nvm install` will implicitly use the newly-installed version
    if [[ "$locally_resolved_nvm_version" == "N/A" ]]; then
      nvm install "$nvm_version";
    elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then
      nvm use "$nvm_version";
    fi
  fi
}
alias cd='cdnvm'

# alias convertbooks=$(find . -name '*.epub' -type f -exec bash -c '/Applications/calibre.app/Contents/MacOS/ebook-convert "$0" "${0%.epub}.mobi" --prefer-author-sort --output-profile=kindle --linearize-tables --smarten-punctuation' {} \;)

# Run ever time we open a new terminal tab/window
cdnvm .

# set trackpad speed
defaults write -g com.apple.trackpad.scaling 3

export EDITOR="cursor -w"

