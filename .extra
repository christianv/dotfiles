# Git credentials
# Not in the repository, to prevent people from accidentally committing under my name
GIT_AUTHOR_NAME="Christian Vuerings"
GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
git config --global user.name "$GIT_AUTHOR_NAME"

if [[ "${USER}" == "christian" ]]; then
	GIT_AUTHOR_EMAIL="cvuerings@pinterest.com"
else
	GIT_AUTHOR_EMAIL="vueringschristian@gmail.com"
fi;

GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
git config --global user.email "$GIT_AUTHOR_EMAIL"

### Aliases
git config --global alias.sync '!git fetch origin && git rebase origin/master'

alias c="cd ~/code"
alias g="cd ~/code/gestalt"
alias p="cd ~/code/pinboard"
alias pw="cd ~/code/pinboard/webapp"

alias j="yarn run jest --watch"

alias gupdate="g && git fetch upstream && git rebase upstream/master"
alias grun="g && yarn && yarn start"
alias pupdate="p && git co master && git fetch origin && git rebase origin/master"

alias sshp="ssh devapp -t 'cd ~/code/pinboard && bash --login'"
alias sshpt="ssh devapp -t 'cd ~/code/pinboard && make web && bash --login'"

alias wp="pw && yarn dev"
alias nw="BUILD=node yarn jest --watch"
alias cw="BUILD=client yarn jest --watch"

gcr () {
  echo "Checking out and rebasing: $1"
	p
	git checkout $1
	git fetch origin
	git rebase origin/master
}

# Set hub option
eval "$(hub alias -s)"

### Git Config

# Aliases
git config --global alias.st 'status -s'
git config --global alias.co 'checkout'

# Editor
git config --global core.editor "code --wait"

### ENV Variables

# Setting CDPATH allows you to jump fast to a directory
export CDPATH="~/code"

# Add python to the PATH
export PATH="/usr/local/share/python/:$PATH"
# export PATH="/usr/local/opt/python/libexec/bin:$PATH"

# Add npm to the PATH
export PATH="/usr/local/share/npm/bin:$PATH"

# Add local node modules to PATH
export PATH="./node_modules/.bin:$PATH"

# Add arcanist to PATH
export PATH="/Users/christian/install/arcanist/bin/:$PATH"

export NVM_DIR="$HOME/.nvm"
  . "/usr/local/opt/nvm/nvm.sh"

# Set JAVA_HOME
export JAVA_HOME=$(/usr/libexec/java_home)

# Add RVM to PATH for scripting
export PATH="$PATH:$HOME/.rvm/bin"

# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"


if [[ "${USER}" == "christian" ]]; then
	# Watcher script for Pinterest
	function watcher() {
		local HOST=devapp

		if [ $# -eq 1 ]; then
      local PROJECT=$1
    else
      local PROJECT=pinboard
    fi

		case $PROJECT in
    magnus)
      FLAGS="--exclude-git --exclude=/bin --exclude=/pkg"
      ;;
    optimus)
      FLAGS="--exclude=*.jar"
      ;;
    *)
      FLAGS="--exclude-git"
      ;;
		esac

		if [ -z "`pgrep -fl ssh | grep '[s]sh -MNf '$HOST`" ]; then
      echo "Starting: ssh -MNf $HOST"
      ssh -MNf $HOST
    fi

		python $HOME/code/pinboard/bin/watcher.py \
    	$FLAGS \
    	-s $HOME/code/$PROJECT/ \
    	$HOST:/home/cvuerings/code/$PROJECT/
	}
fi;


# Install script
# Install Brew
# /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
# Run Brew
# ./brew.sh
# OS X
# ./.osx

# Arcanist autocomplate script

if [[ -n ${ZSH_VERSION-} ]]; then
  autoload -U +X bashcompinit && bashcompinit
fi

_arc ()
{
  CUR="${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=()
  OPTS=$(echo | arc shell-complete --current ${COMP_CWORD} -- ${COMP_WORDS[@]})

  if [ $? -ne 0 ]; then
    return $?
  fi

  if [ "$OPTS" = "FILE" ]; then
    COMPREPLY=( $(compgen -f -- ${CUR}) )
    return 0
  fi

  if [ "$OPTS" = "ARGUMENT" ]; then
    return 0
  fi

  COMPREPLY=( $(compgen -W "${OPTS}" -- ${CUR}) )
}
complete -F _arc -o filenames arc
