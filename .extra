# Git credentials
# Not in the repository, to prevent people from accidentally committing under my name
GIT_AUTHOR_NAME="Christian Vuerings"
GIT_AUTHOR_EMAIL="cvuerings@pinterest.com"
GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
git config --global user.name "$GIT_AUTHOR_NAME"

GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
git config --global user.email "$GIT_AUTHOR_EMAIL"

### Aliases
git config --global alias.sync '!git fetch origin && git rebase origin/master'

alias c="cd ~/code"
alias g="cd ~/code/gestalt"
alias p="cd ~/code/pinboard"
alias pw="cd ~/code/pinboard/webapp"
alias j="yarn run jest --watch --verbose=false"

alias gupdate="g && git co master && git fetch upstream && git rebase upstream/master"
alias pupdate="p && git co master && git fetch origin && git rebase origin/master"

alias sshp="gsigndevapp && ssh devapp -t 'cd ~/code/pinboard && bash --login'"
alias sshpt="gsigndevapp && ssh devapp -t 'cd ~/code/pinboard && make web && bash --login'"

alias wp="gsigndevapp && pw && yarn dev"
alias nw="BUILD=node yarn jest --watch"
alias cw="BUILD=client yarn jest --watch"
alias debug="pw && ssh -A -N -L 9229:localhost:9229 devapp"

alias p2="cd ~/code/pinboard2"
alias pw2="cd ~/code/pinboard2/webapp"
alias wp2="pw2 && ./run-forever.sh watchman-sync --root ../ --remote devapp2:~/code/pinboard/"
alias debug2="pw2 && ssh -A -N -L 9229:localhost:9229 devapp2"
alias sshp2="ssh devapp2 -t 'cd ~/code/pinboard && bash --login'"
alias sshpt2="ssh devapp2 -t 'cd ~/code/pinboard && make web && bash --login'"
alias pupdate2="p2 && git co master && git fetch origin && git rebase origin/master"

# inspired by https://github.com/roymarantz/junos-pulse/blob/master/vpn_reconnect.applescript
alias vpnconnect="osascript ~/code/dotfiles/vpnconnect.scpt"

# Logs into gironde with a keychain access secret
# Follow https://www.netmeister.org/blog/keychain-passwords.html to add the "gironde" Keychain Item
function glogin() {
	expect <<EOD
set timeout -1
spawn gironde login
match_max 100000
expect "Please enter the LDAP password for ${USER}:"
send -- "$(security find-generic-password -a ${USER} -s gironde -w)\r"
expect "Login successful"
send_user "Success!\n"
EOD
}
# alias glogin="gironde login cvuerings"
alias gsigndevapp="glogin && gironde sign -ca dev-cvuerings --user cvuerings"
alias gsignengineering="glogin && gironde sign -ca engineering --user cvuerings"
alias gsignwebplatform="glogin && gironde sign -ca web-platform --user cvuerings"

gcr () {
  echo "Checking out and rebasing: $1"
  p
  git checkout $1
  git fetch origin
  git rebase origin/master
}

# Set hub option
eval "$(hub alias -s)"

### Git Config

# Aliases
git config --global alias.st 'status -s'
git config --global alias.co 'checkout'

# Editor
git config --global core.editor "code --wait"

### ENV Variables

# Setting CDPATH allows you to jump fast to a directory
export CDPATH=".:~/:~/code"

# Add python to the PATH
export PATH="/usr/local/share/python/:$PATH"
# export PATH="/usr/local/opt/python/libexec/bin:$PATH"

# Add npm to the PATH
export PATH="/usr/local/share/npm/bin:$PATH"

# Add local node modules to PATH
export PATH="./node_modules/.bin:$PATH"

# Add bash completion
export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"

for completion in "$(brew --prefix)/etc/bash_completion.d/"*
do
    . $completion
done

export NVM_DIR="$HOME/.nvm"
  . "/usr/local/opt/nvm/nvm.sh"

# Set JAVA_HOME
export JAVA_HOME=$(/usr/libexec/java_home)

# Add RVM to PATH for scripting
export PATH="$PATH:$HOME/.rvm/bin"

# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"


# Arc diff with nolint and nounit + automatically reply to questions
function ad() {
	expect <<EOD
set timeout -1
spawn arc diff --nolint --nounit --browse
match_max 100000
expect "Provide explanation for skipping lint or press Enter to abort"
send -- "remote\r"
expect "Provide explanation for skipping unit tests or press Enter to abort"
send -- "remote\r"
expect eof
EOD
}


# Arc land a diff and retry 5 times
# Usage: `al branch-name`
function al() {
  if [[ $# -eq 0 ]] ; then
    echo 'Please pass in a branch name: `al remove-ngapp`'
  else
    n=0
    until [ $n -ge 5 ]
    do
      arc land $1 && break
      n=$[$n+1]
      sleep 1
    done
  fi
}

# Watcher script for Pinterest
function watcher() {
  local HOST=devapp

  if [ $# -eq 1 ]; then
    local PROJECT=$1
  else
    local PROJECT=pinboard
  fi

  case $PROJECT in
  magnus)
    FLAGS="--exclude-git --exclude=/bin --exclude=/pkg"
    ;;
  optimus)
    FLAGS="--exclude=*.jar"
    ;;
  *)
    FLAGS="--exclude-git"
    ;;
  esac

  if [ -z "`pgrep -fl ssh | grep '[s]sh -MNf '$HOST`" ]; then
    echo "Starting: ssh -MNf $HOST"
    ssh -MNf $HOST
  fi

  python $HOME/code/pinboard/bin/watcher.py \
    $FLAGS \
    -s $HOME/code/$PROJECT/ \
    $HOST:/home/cvuerings/code/$PROJECT/
}


# Install script
# Install Brew
# /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
# Run Brew
# ./brew.sh
# OS X
# ./.osx

# Arcanist autocomplate script

if [[ -n ${ZSH_VERSION-} ]]; then
  autoload -U +X bashcompinit && bashcompinit
fi

# _arc ()
# {
#   CUR="${COMP_WORDS[COMP_CWORD]}"
#   COMPREPLY=()
#   OPTS=$(echo | arc shell-complete --current ${COMP_CWORD} -- ${COMP_WORDS[@]})

#   if [ $? -ne 0 ]; then
#     return $?
#   fi

#   if [ "$OPTS" = "FILE" ]; then
#     COMPREPLY=( $(compgen -f -- ${CUR}) )
#     return 0
#   fi

#   if [ "$OPTS" = "ARGUMENT" ]; then
#     return 0
#   fi

#   COMPREPLY=( $(compgen -W "${OPTS}" -- ${CUR}) )
# }
# complete -F _arc -o filenames arc

source "$(dirname "$(command -v arc)")/../resources/shell/bash-completion"


# Automatically change Node.js version based on `.nvmrc`
find-up () {
  path=$(pwd)
  while [[ "$path" != "" && ! -e "$path/$1" ]]; do
    path=${path%/*}
  done
  echo "$path"
}

cdnvm(){
  cd "$@";
  nvm_path=$(find-up .nvmrc | tr -d '[:space:]')

  # If there are no .nvmrc file, use the default nvm version
  if [[ ! $nvm_path = *[^[:space:]]* ]]; then

    declare default_version;
    default_version=$(nvm version default);

    # If there is no default version, set it to `node`
    # This will use the latest version on your machine
    if [[ $default_version == "N/A" ]]; then
      nvm alias default node;
      default_version=$(nvm version default);
    fi

    # If the current version is not the default version, set it to use the default version
    if [[ $(nvm current) != "$default_version" ]]; then
      nvm use default;
    fi

    elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
    declare nvm_version
    nvm_version=$(<"$nvm_path"/.nvmrc)

    declare locally_resolved_nvm_version
    # `nvm ls` will check all locally-available versions
    # If there are multiple matching versions, take the latest one
    # Remove the `->` and `*` characters and spaces
    # `locally_resolved_nvm_version` will be `N/A` if no local versions are found
    locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

    # If it is not already installed, install it
    # `nvm install` will implicitly use the newly-installed version
    if [[ "$locally_resolved_nvm_version" == "N/A" ]]; then
      nvm install "$nvm_version";
    elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then
      nvm use "$nvm_version";
    fi
  fi
}
alias cd='cdnvm'

# Run ever time we open a new terminal tab/window
cdnvm .
